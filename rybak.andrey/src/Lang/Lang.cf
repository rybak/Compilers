Prog. ParProgram ::= [ParTopLevel] ;
Decl. ParTopLevel ::= [PIdent] ":" ParLType ;
FuncDef. ParTopLevel ::= PIdent "(" [PIdent] ")" "{" [ParStm] "}" ;
separator  nonempty PIdent "," ;

TVoid.      ParLType ::= "void" ;
TInt.       ParLType ::= "int" ;
TFunType.   ParLType ::= "(" [ParLType] ")" "->" ParLType ;
separator   ParLType " " ;


SAss.    ParStm ::= PIdent "=" ParExp ;
SPrint.  ParStm ::= "print" ParExp;
SExp.    ParStm ::= ParExp ;

-- EOr.     ParExp1 ::= ParExp1 "||" ParExp2 ;
-- EAnd.    ParExp2 ::= ParExp2 "&&" ParExp3 ;
-- EEq.     ParExp3 ::= ParExp3 "==" ParExp4 ;
-- ENeq.    ParExp3 ::= ParExp3 "!=" ParExp4 ;
-- ELt.     ParExp4 ::= ParExp4 "<"  ParExp5 ;
-- EGt.     ParExp4 ::= ParExp4 ">"  ParExp5 ;
-- ELtE.    ParExp4 ::= ParExp4 "<=" ParExp5 ;
-- EGtE.    ParExp4 ::= ParExp4 ">=" ParExp5 ;
EAdd.    ParExp5 ::= ParExp5 "+" ParExp6 ;
ESub.    ParExp5 ::= ParExp5 "-" ParExp6 ;
EMul.    ParExp6 ::= ParExp6 "*" ParExp7 ;
EDiv.    ParExp6 ::= ParExp6 "/" ParExp7 ;
-- ENeg.    ParExp7 ::= "!" ParExp6 ;
ENegInt. ParExp7 ::= "-" ParExp6 ;
-- ECall.   ParExp8 ::= PIdent  "(" [ParExp] ")" ;
EVar.    ParExp8 ::= PIdent ;
EInt.    ParExp8 ::= Integer ;
-- EBool.   ParExp8 ::= BoolT ;

terminator ParExp "";
coercions ParExp 8 ;
terminator ParStm ";";

position token PIdent (letter | '_' ) (letter | digit | '_' )* ;
-- position token 
